{"ast":null,"code":"import * as React from 'react';\nimport { useSubscription } from 'use-subscription';\nimport useNavigation from \"./useNavigation\";\nexport default function useIsFocused() {\n  var navigation = useNavigation();\n  var getCurrentValue = React.useCallback(navigation.isFocused, [navigation]);\n  var subscribe = React.useCallback(function (callback) {\n    var unsubscribeFocus = navigation.addListener('focus', function () {\n      return callback(true);\n    });\n    var unsubscribeBlur = navigation.addListener('blur', function () {\n      return callback(false);\n    });\n    return function () {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n  return useSubscription({\n    getCurrentValue: getCurrentValue,\n    subscribe: subscribe\n  });\n}","map":{"version":3,"names":["React","useSubscription","useNavigation","useIsFocused","navigation","getCurrentValue","useCallback","isFocused","subscribe","callback","unsubscribeFocus","addListener","unsubscribeBlur"],"sources":["C:\\Users\\hibab\\Downloads\\aina19\\pingaina\\node_modules\\@react-navigation\\core\\lib\\module\\useIsFocused.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useSubscription } from 'use-subscription';\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n * It uses `use-subscription` under the hood for safer use in concurrent mode.\n */\nexport default function useIsFocused(): boolean {\n  const navigation = useNavigation();\n  const getCurrentValue = React.useCallback(navigation.isFocused, [navigation]);\n  const subscribe = React.useCallback(\n    (callback: (value: boolean) => void) => {\n      const unsubscribeFocus = navigation.addListener('focus', () =>\n        callback(true)\n      );\n\n      const unsubscribeBlur = navigation.addListener('blur', () =>\n        callback(false)\n      );\n\n      return () => {\n        unsubscribeFocus();\n        unsubscribeBlur();\n      };\n    },\n    [navigation]\n  );\n\n  return useSubscription({\n    getCurrentValue,\n    subscribe,\n  });\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,OAAOC,aAAP;AAOA,eAAe,SAASC,YAATA,CAAA,EAAiC;EAC9C,IAAMC,UAAU,GAAGF,aAAa,EAAhC;EACA,IAAMG,eAAe,GAAGL,KAAK,CAACM,WAAN,CAAkBF,UAAU,CAACG,SAA7B,EAAwC,CAACH,UAAD,CAAxC,CAAxB;EACA,IAAMI,SAAS,GAAGR,KAAK,CAACM,WAAN,CACf,UAAAG,QAAD,EAAwC;IACtC,IAAMC,gBAAgB,GAAGN,UAAU,CAACO,WAAX,CAAuB,OAAvB,EAAgC;MAAA,OACvDF,QAAQ,CAAC,IAAD,CADe;IAAA,EAAzB;IAIA,IAAMG,eAAe,GAAGR,UAAU,CAACO,WAAX,CAAuB,MAAvB,EAA+B;MAAA,OACrDF,QAAQ,CAAC,KAAD,CADc;IAAA,EAAxB;IAIA,OAAO,YAAM;MACXC,gBAAgB;MAChBE,eAAe;IAChB,CAHD;EAID,CAde,EAehB,CAACR,UAAD,CAfgB,CAAlB;EAkBA,OAAOH,eAAe,CAAC;IACrBI,eADqB,EACrBA,eADqB;IAErBG,SAAA,EAAAA;EAFqB,CAAD,CAAtB;AAID"},"metadata":{},"sourceType":"module","externalDependencies":[]}