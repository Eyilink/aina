{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { MaybeScreenContainer, MaybeScreen } from \"../Screens\";\nimport { getDefaultHeaderHeight } from \"../Header/HeaderSegment\";\nimport CardContainer from \"./CardContainer\";\nimport { DefaultTransition, ModalTransition } from \"../../TransitionConfigs/TransitionPresets\";\nimport { forNoAnimation as forNoAnimationHeader } from \"../../TransitionConfigs/HeaderStyleInterpolators\";\nimport { forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nvar EPSILON = 0.01;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\nvar getHeaderHeights = function getHeaderHeights(routes, insets, descriptors, layout, previous) {\n  return routes.reduce(function (acc, curr) {\n    var _ref = descriptors[curr.key] || {},\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options;\n    var _StyleSheet$flatten = StyleSheet.flatten(options.headerStyle || {}),\n      _StyleSheet$flatten$h = _StyleSheet$flatten.height,\n      height = _StyleSheet$flatten$h === void 0 ? previous[curr.key] : _StyleSheet$flatten$h;\n    var safeAreaInsets = _objectSpread({}, insets, {}, options.safeAreaInsets);\n    var _options$headerStatus = options.headerStatusBarHeight,\n      headerStatusBarHeight = _options$headerStatus === void 0 ? safeAreaInsets.top : _options$headerStatus;\n    acc[curr.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\nvar getDistanceFromOptions = function getDistanceFromOptions(mode, layout, descriptor) {\n  var _ref2 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n    _ref2$gestureDirectio = _ref2.gestureDirection,\n    gestureDirection = _ref2$gestureDirectio === void 0 ? mode === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection : _ref2$gestureDirectio;\n  return getDistanceForDirection(layout, gestureDirection);\n};\nvar getProgressFromGesture = function getProgressFromGesture(mode, gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions(mode, {\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\nvar CardStack = function (_React$Component) {\n  _inherits(CardStack, _React$Component);\n  var _super = _createSuper(CardStack);\n  _createClass(CardStack, null, [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n        var _ref3 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n          animationEnabled = _ref3.animationEnabled;\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      return {\n        routes: props.routes,\n        scenes: props.routes.map(function (route, index, self) {\n          var previousRoute = self[index - 1];\n          var nextRoute = self[index + 1];\n          var oldScene = state.scenes[index];\n          var currentGesture = gestures[route.key];\n          var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n          var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n          var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n          var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n          var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n          var scene = {\n            route: route,\n            descriptor: descriptor,\n            progress: {\n              current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),\n              next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : undefined,\n              previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : undefined\n            },\n            __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n          };\n          if (oldScene && scene.__memo.every(function (it, i) {\n            return oldScene.__memo[i] === it;\n          })) {\n            return oldScene;\n          }\n          return scene;\n        }),\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(props.routes, props.insets, state.descriptors, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n  function CardStack(_props) {\n    var _this;\n    _classCallCheck(this, CardStack);\n    _this = _super.call(this, _props);\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(props.routes, props.insets, state.descriptors, layout, {})\n        };\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleHeaderLayout\", function (_ref4) {\n      var route = _ref4.route,\n        height = _ref4.height;\n      _this.setState(function (_ref5) {\n        var headerHeights = _ref5.headerHeights;\n        var previousHeight = headerHeights[route.key];\n        if (previousHeight === height) {\n          return null;\n        }\n        return {\n          headerHeights: _objectSpread({}, headerHeights, _defineProperty2({}, route.key, height))\n        };\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n    var _Dimensions$get = Dimensions.get('window'),\n      _Dimensions$get$heigh = _Dimensions$get.height,\n      _height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n      _Dimensions$get$width = _Dimensions$get.width,\n      _width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: {\n        height: _height,\n        width: _width\n      },\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n  _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props = this.props,\n        mode = _this$props.mode,\n        insets = _this$props.insets,\n        descriptors = _this$props.descriptors,\n        state = _this$props.state,\n        routes = _this$props.routes,\n        closingRouteKeys = _this$props.closingRouteKeys,\n        onOpenRoute = _this$props.onOpenRoute,\n        onCloseRoute = _this$props.onCloseRoute,\n        getPreviousRoute = _this$props.getPreviousRoute,\n        getGesturesEnabled = _this$props.getGesturesEnabled,\n        renderHeader = _this$props.renderHeader,\n        renderScene = _this$props.renderScene,\n        headerMode = _this$props.headerMode,\n        onTransitionStart = _this$props.onTransitionStart,\n        onTransitionEnd = _this$props.onTransitionEnd,\n        onPageChangeStart = _this$props.onPageChangeStart,\n        onPageChangeConfirm = _this$props.onPageChangeConfirm,\n        onPageChangeCancel = _this$props.onPageChangeCancel;\n      var _this$state = this.state,\n        scenes = _this$state.scenes,\n        layout = _this$state.layout,\n        gestures = _this$state.gestures,\n        headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedDescriptor = descriptors[focusedRoute.key];\n      var focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n      var defaultTransitionPreset = mode === 'modal' ? ModalTransition : DefaultTransition;\n      if (headerMode === 'screen') {\n        defaultTransitionPreset = _objectSpread({}, defaultTransitionPreset, {\n          headerStyleInterpolator: forNoAnimationHeader\n        });\n      }\n      var _ref6 = focusedOptions.safeAreaInsets || {},\n        _ref6$top = _ref6.top,\n        top = _ref6$top === void 0 ? insets.top : _ref6$top,\n        _ref6$right = _ref6.right,\n        right = _ref6$right === void 0 ? insets.right : _ref6$right,\n        _ref6$bottom = _ref6.bottom,\n        bottom = _ref6$bottom === void 0 ? insets.bottom : _ref6$bottom,\n        _ref6$left = _ref6.left,\n        left = _ref6$left === void 0 ? insets.left : _ref6$left;\n      var isScreensEnabled = Platform.OS !== 'ios' && mode !== 'modal';\n      return React.createElement(React.Fragment, null, React.createElement(MaybeScreenContainer, {\n        enabled: isScreensEnabled,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = scene.progress.next ? scene.progress.next.interpolate({\n          inputRange: [0, 1 - EPSILON, 1],\n          outputRange: [1, 1, 0],\n          extrapolate: 'clamp'\n        }) : 1;\n        var _ref7 = scene.descriptor ? scene.descriptor.options : {},\n          safeAreaInsets = _ref7.safeAreaInsets,\n          headerShown = _ref7.headerShown,\n          headerTransparent = _ref7.headerTransparent,\n          cardShadowEnabled = _ref7.cardShadowEnabled,\n          cardOverlayEnabled = _ref7.cardOverlayEnabled,\n          cardOverlay = _ref7.cardOverlay,\n          cardStyle = _ref7.cardStyle,\n          animationEnabled = _ref7.animationEnabled,\n          gestureResponseDistance = _ref7.gestureResponseDistance,\n          gestureVelocityImpact = _ref7.gestureVelocityImpact,\n          _ref7$gestureDirectio = _ref7.gestureDirection,\n          gestureDirection = _ref7$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref7$gestureDirectio,\n          _ref7$transitionSpec = _ref7.transitionSpec,\n          transitionSpec = _ref7$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref7$transitionSpec,\n          _ref7$cardStyleInterp = _ref7.cardStyleInterpolator,\n          cardStyleInterpolator = _ref7$cardStyleInterp === void 0 ? animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref7$cardStyleInterp,\n          _ref7$headerStyleInte = _ref7.headerStyleInterpolator,\n          headerStyleInterpolator = _ref7$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref7$headerStyleInte;\n        var transitionConfig = {\n          gestureDirection: gestureDirection,\n          transitionSpec: transitionSpec,\n          cardStyleInterpolator: cardStyleInterpolator,\n          headerStyleInterpolator: headerStyleInterpolator\n        };\n        if (index !== self.length - 1) {\n          var nextScene = scenes[index + 1];\n          if (nextScene) {\n            var _ref8 = nextScene.descriptor ? nextScene.descriptor.options : {},\n              _animationEnabled = _ref8.animationEnabled,\n              _ref8$gestureDirectio = _ref8.gestureDirection,\n              _gestureDirection = _ref8$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref8$gestureDirectio,\n              _ref8$transitionSpec = _ref8.transitionSpec,\n              _transitionSpec = _ref8$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref8$transitionSpec,\n              _ref8$cardStyleInterp = _ref8.cardStyleInterpolator,\n              _cardStyleInterpolator = _ref8$cardStyleInterp === void 0 ? _animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref8$cardStyleInterp,\n              _ref8$headerStyleInte = _ref8.headerStyleInterpolator,\n              _headerStyleInterpolator = _ref8$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref8$headerStyleInte;\n            transitionConfig = {\n              gestureDirection: _gestureDirection,\n              transitionSpec: _transitionSpec,\n              cardStyleInterpolator: _cardStyleInterpolator,\n              headerStyleInterpolator: _headerStyleInterpolator\n            };\n          }\n        }\n        var _ref9 = safeAreaInsets || {},\n          _ref9$top = _ref9.top,\n          safeAreaInsetTop = _ref9$top === void 0 ? insets.top : _ref9$top,\n          _ref9$right = _ref9.right,\n          safeAreaInsetRight = _ref9$right === void 0 ? insets.right : _ref9$right,\n          _ref9$bottom = _ref9.bottom,\n          safeAreaInsetBottom = _ref9$bottom === void 0 ? insets.bottom : _ref9$bottom,\n          _ref9$left = _ref9.left,\n          safeAreaInsetLeft = _ref9$left === void 0 ? insets.left : _ref9$left;\n        var previousRoute = getPreviousRoute({\n          route: scene.route\n        });\n        var previousScene = scenes[index - 1];\n        if (previousRoute) {\n          for (var j = index - 1; j >= 0; j--) {\n            var s = scenes[j];\n            if (s && s.route.key === previousRoute.key) {\n              previousScene = s;\n              break;\n            }\n          }\n        }\n        return React.createElement(MaybeScreen, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          enabled: isScreensEnabled,\n          active: isScreenActive,\n          pointerEvents: \"box-none\"\n        }, React.createElement(CardContainer, _extends({\n          index: index,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          previousScene: previousScene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          cardOverlay: cardOverlay,\n          cardOverlayEnabled: cardOverlayEnabled,\n          cardShadowEnabled: cardShadowEnabled,\n          cardStyle: cardStyle,\n          onPageChangeStart: onPageChangeStart,\n          onPageChangeConfirm: onPageChangeConfirm,\n          onPageChangeCancel: onPageChangeCancel,\n          gestureResponseDistance: gestureResponseDistance,\n          headerHeight: headerHeights[route.key],\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousRoute: getPreviousRoute,\n          getFocusedRoute: _this2.getFocusedRoute,\n          headerMode: headerMode,\n          headerShown: headerShown,\n          headerTransparent: headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          gestureEnabled: index !== 0 && getGesturesEnabled({\n            route: route\n          }),\n          gestureVelocityImpact: gestureVelocityImpact\n        }, transitionConfig)));\n      })), headerMode === 'float' ? renderHeader({\n        mode: 'float',\n        layout: layout,\n        insets: {\n          top: top,\n          right: right,\n          bottom: bottom,\n          left: left\n        },\n        scenes: scenes,\n        getPreviousRoute: getPreviousRoute,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        gestureDirection: focusedOptions.gestureDirection !== undefined ? focusedOptions.gestureDirection : defaultTransitionPreset.gestureDirection,\n        styleInterpolator: focusedOptions.headerStyleInterpolator !== undefined ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,\n        style: styles.floating\n      }) : null);\n    }\n  }]);\n  return CardStack;\n}(React.Component);\nexport { CardStack as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  floating: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  }\n});","map":{"version":3,"names":["React","Animated","StyleSheet","Dimensions","Platform","MaybeScreenContainer","MaybeScreen","getDefaultHeaderHeight","CardContainer","DefaultTransition","ModalTransition","forNoAnimation","forNoAnimationHeader","forNoAnimationCard","getDistanceForDirection","EPSILON","FALLBACK_DESCRIPTOR","Object","freeze","options","getHeaderHeights","routes","insets","descriptors","layout","previous","reduce","acc","curr","_ref","key","_ref$options","_StyleSheet$flatten","flatten","headerStyle","_StyleSheet$flatten$h","height","safeAreaInsets","_objectSpread","_options$headerStatus","headerStatusBarHeight","top","getDistanceFromOptions","mode","descriptor","_ref2","_ref2$gestureDirectio","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","_React$Component","_inherits","_super","_createSuper","_createClass","value","getDerivedStateFromProps","props","state","gestures","_ref3","animationEnabled","Value","openingRouteKeys","includes","scenes","map","route","index","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","__memo","every","it","i","headerHeights","_props","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","e","_e$nativeEvent$layout","nativeEvent","setState","_ref4","_ref5","previousHeight","_defineProperty2","_Dimensions$get","get","_Dimensions$get$heigh","_height","_Dimensions$get$width","_width","render","_this2","_this$props","closingRouteKeys","onOpenRoute","onCloseRoute","getPreviousRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","_this$state","focusedRoute","focusedDescriptor","focusedOptions","defaultTransitionPreset","headerStyleInterpolator","_ref6","_ref6$top","_ref6$right","right","_ref6$bottom","bottom","_ref6$left","left","isScreensEnabled","OS","createElement","Fragment","enabled","style","styles","container","onLayout","handleLayout","focused","isScreenActive","extrapolate","_ref7","headerShown","headerTransparent","cardShadowEnabled","cardOverlayEnabled","cardOverlay","cardStyle","gestureResponseDistance","gestureVelocityImpact","_ref7$gestureDirectio","_ref7$transitionSpec","transitionSpec","_ref7$cardStyleInterp","cardStyleInterpolator","_ref7$headerStyleInte","transitionConfig","length","nextScene","_ref8","_ref8$gestureDirectio","_ref8$transitionSpec","_ref8$cardStyleInterp","_ref8$headerStyleInte","_ref9","_ref9$top","safeAreaInsetTop","_ref9$right","safeAreaInsetRight","_ref9$bottom","safeAreaInsetBottom","_ref9$left","safeAreaInsetLeft","previousScene","j","s","absoluteFill","active","pointerEvents","_extends","closing","headerHeight","onHeaderHeightChange","handleHeaderLayout","getFocusedRoute","gestureEnabled","onContentHeightChange","styleInterpolator","floating","Component","default","create","flex","overflow","position"],"sources":["C:\\Users\\HP\\Documents\\Ping\\pingaina\\node_modules\\@react-navigation\\stack\\lib\\module\\views\\Stack\\CardStack.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n} from 'react-native';\nimport { EdgeInsets } from 'react-native-safe-area-context';\nimport { Route, StackNavigationState } from '@react-navigation/native';\n\nimport { MaybeScreenContainer, MaybeScreen } from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const { height = previous[curr.key] } = StyleSheet.flatten(\n      options.headerStyle || {}\n    );\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const { headerStatusBarHeight = safeAreaInsets.top } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-ignore\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          state.descriptors,\n          layout,\n          {}\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getPreviousRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    // Screens is buggy on iOS and web, so we only enable it on Android\n    // For modals, usually we want the screen underneath to be visible, so also disable it there\n    const isScreensEnabled = Platform.OS !== 'ios' && mode !== 'modal';\n\n    return (\n      <React.Fragment>\n        <MaybeScreenContainer\n          enabled={isScreensEnabled}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            const isScreenActive = scene.progress.next\n              ? scene.progress.next.interpolate({\n                  inputRange: [0, 1 - EPSILON, 1],\n                  outputRange: [1, 1, 0],\n                  extrapolate: 'clamp',\n                })\n              : 1;\n\n            const {\n              safeAreaInsets,\n              headerShown,\n              headerTransparent,\n              cardShadowEnabled,\n              cardOverlayEnabled,\n              cardOverlay,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  gestureDirection,\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const {\n              top: safeAreaInsetTop = insets.top,\n              right: safeAreaInsetRight = insets.right,\n              bottom: safeAreaInsetBottom = insets.bottom,\n              left: safeAreaInsetLeft = insets.left,\n            } = safeAreaInsets || {};\n\n            const previousRoute = getPreviousRoute({ route: scene.route });\n\n            let previousScene = scenes[index - 1];\n\n            if (previousRoute) {\n              // The previous scene will be shortly before the current scene in the array\n              // So loop back from current index to avoid looping over the full array\n              for (let j = index - 1; j >= 0; j--) {\n                const s = scenes[j];\n\n                if (s && s.route.key === previousRoute.key) {\n                  previousScene = s;\n                  break;\n                }\n              }\n            }\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={isScreensEnabled}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  previousScene={previousScene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlay={cardOverlay}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  gestureResponseDistance={gestureResponseDistance}\n                  headerHeight={headerHeights[route.key]}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousRoute={getPreviousRoute}\n                  getFocusedRoute={this.getFocusedRoute}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  headerTransparent={headerTransparent}\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {headerMode === 'float'\n          ? renderHeader({\n              mode: 'float',\n              layout,\n              insets: { top, right, bottom, left },\n              scenes,\n              getPreviousRoute,\n              getFocusedRoute: this.getFocusedRoute,\n              onContentHeightChange: this.handleHeaderLayout,\n              gestureDirection:\n                focusedOptions.gestureDirection !== undefined\n                  ? focusedOptions.gestureDirection\n                  : defaultTransitionPreset.gestureDirection,\n              styleInterpolator:\n                focusedOptions.headerStyleInterpolator !== undefined\n                  ? focusedOptions.headerStyleInterpolator\n                  : defaultTransitionPreset.headerStyleInterpolator,\n              style: styles.floating,\n            })\n          : null}\n      </React.Fragment>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  floating: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}