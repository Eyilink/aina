{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\hibab\\\\Downloads\\\\aina19\\\\pingaina\\\\src\\\\components\\\\molecules\\\\Slider.tsx\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useRef, useState } from 'react';\nimport Modal from 'react-native-modal';\nimport Slider from \"react-native-web/dist/exports/Slider\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SubTitle from \"../atoms/SubTitle\";\nimport Button from \"../atoms/Button\";\nimport SliderFooter from \"../atoms/SliderFooter\";\nimport SliderPainSymptoms from \"./SliderPainSymptoms\";\nimport colors from \"../../styles/colors\";\nimport layout from \"../../styles/layout\";\nimport i18n from \"../../i18n/i18n\";\nimport { PAIN_SYMPTOMS, PHONE_OS } from \"../../constants/constants\";\nvar CustomSlider = function CustomSlider(_ref) {\n  var isVisible = _ref.isVisible,\n    onCancel = _ref.onCancel,\n    onConfirm = _ref.onConfirm,\n    step = _ref.step,\n    initialValue = _ref.initialValue,\n    type = _ref.type,\n    min = _ref.min,\n    max = _ref.max,\n    title = _ref.title,\n    hasPainSymptoms = _ref.hasPainSymptoms;\n  var sliderRef = useRef(null);\n  var _useState = useState(initialValue),\n    _useState2 = _slicedToArray(_useState, 2),\n    value = _useState2[0],\n    setValue = _useState2[1];\n  var _useState3 = useState(PAIN_SYMPTOMS),\n    _useState4 = _slicedToArray(_useState3, 2),\n    updatedPainSymptoms = _useState4[0],\n    setPainSymptoms = _useState4[1];\n  var roundValue = function roundValue(value) {\n    if (!step) return value;\n    var dividend = 1 / step;\n    return Math.round(value / step) / dividend;\n  };\n  var onValueChangeRound = function onValueChangeRound(value) {\n    setValue && setValue(roundValue(value));\n  };\n  var onConfirmSlider = function onConfirmSlider() {\n    var roundedValue = roundValue(value);\n    if (PHONE_OS === 'ios' && step && sliderRef.current) {\n      sliderRef.current.setNativeProps({\n        value: roundedValue\n      });\n    }\n    onConfirm && onConfirm(roundedValue, updatedPainSymptoms);\n  };\n  var onChangePainSymptom = function onChangePainSymptom(pain, value) {\n    setPainSymptoms(function (prevState) {\n      prevState[pain] = value;\n      return _objectSpread({}, prevState);\n    });\n  };\n  return React.createElement(Modal, {\n    isVisible: isVisible,\n    onBackdropPress: onCancel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, React.createElement(SubTitle, {\n    isCenter: true,\n    text: title,\n    style: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }), React.createElement(Slider, {\n    minimumValue: min,\n    maximumValue: max,\n    minimumTrackTintColor: colors.primary,\n    step: PHONE_OS === 'ios' ? 0 : step,\n    value: value,\n    style: styles.slider,\n    thumbTintColor: colors.primary,\n    onValueChange: onValueChangeRound,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }), React.createElement(SliderFooter, {\n    type: type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }), hasPainSymptoms && React.createElement(SliderPainSymptoms, {\n    painSymptoms: updatedPainSymptoms,\n    onPressPainSymptom: onChangePainSymptom,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }), React.createElement(Button, {\n    text: i18n.t('signup.validate'),\n    onPress: onConfirmSlider,\n    isValidate: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  })));\n};\nexport default CustomSlider;\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.white,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: layout.padding,\n    paddingTop: layout.padding * 2,\n    borderRadius: layout.buttons.borderRadius\n  },\n  slider: {\n    width: '100%',\n    zIndex: 2,\n    marginTop: layout.padding / 2\n  },\n  title: {\n    marginHorizontal: 0\n  }\n});","map":{"version":3,"names":["React","useRef","useState","Modal","Slider","StyleSheet","View","SubTitle","Button","SliderFooter","SliderPainSymptoms","colors","layout","i18n","PAIN_SYMPTOMS","PHONE_OS","CustomSlider","_ref","isVisible","onCancel","onConfirm","step","initialValue","type","min","max","title","hasPainSymptoms","sliderRef","_useState","_useState2","_slicedToArray","value","setValue","_useState3","_useState4","updatedPainSymptoms","setPainSymptoms","roundValue","dividend","Math","round","onValueChangeRound","onConfirmSlider","roundedValue","current","setNativeProps","onChangePainSymptom","pain","prevState","_objectSpread","createElement","onBackdropPress","__source","fileName","_jsxFileName","lineNumber","columnNumber","style","styles","container","isCenter","text","minimumValue","maximumValue","minimumTrackTintColor","primary","slider","thumbTintColor","onValueChange","painSymptoms","onPressPainSymptom","t","onPress","isValidate","create","backgroundColor","white","justifyContent","alignItems","paddingHorizontal","padding","paddingTop","borderRadius","buttons","width","zIndex","marginTop","marginHorizontal"],"sources":["C:/Users/hibab/Downloads/aina19/pingaina/src/components/molecules/Slider.tsx"],"sourcesContent":["import React, { ReactElement, useRef, useState } from 'react';\r\nimport Modal from 'react-native-modal';\r\nimport { Slider, StyleSheet, View } from 'react-native';\r\n\r\nimport SubTitle from '@components/atoms/SubTitle';\r\nimport Button from '@components/atoms/Button';\r\nimport SliderFooter from '@components/atoms/SliderFooter';\r\nimport SliderPainSymptoms from '@components/molecules/SliderPainSymptoms';\r\n\r\nimport { PainSymptoms } from '@store/types';\r\n\r\nimport colors from '@styles/colors';\r\nimport layout from '@styles/layout';\r\nimport i18n from '@i18n/i18n';\r\nimport { PAIN_SYMPTOMS, PHONE_OS } from '@constants/constants';\r\n\r\ntype Props = {\r\n  isVisible: boolean;\r\n  onConfirm: (value: number, updatedPainSymptoms?: object) => void;\r\n  onCancel: () => void;\r\n  step: number;\r\n  initialValue: number;\r\n  min: number;\r\n  max: number;\r\n  type: 'pain' | 'temperature';\r\n  title: string;\r\n  hasPainSymptoms: boolean;\r\n};\r\n\r\nconst CustomSlider = ({\r\n  isVisible,\r\n  onCancel,\r\n  onConfirm,\r\n  step,\r\n  initialValue,\r\n  type,\r\n  min,\r\n  max,\r\n  title,\r\n  hasPainSymptoms,\r\n}: Props): ReactElement => {\r\n  const sliderRef = useRef<Slider | null>(null);\r\n  const [value, setValue] = useState<number>(initialValue);\r\n  const [updatedPainSymptoms, setPainSymptoms] = useState<PainSymptoms>(\r\n    PAIN_SYMPTOMS,\r\n  );\r\n\r\n  const roundValue = (value: number): number => {\r\n    if (!step) return value;\r\n\r\n    const dividend = 1 / step;\r\n    return Math.round(value / step) / dividend;\r\n  };\r\n\r\n  const onValueChangeRound = (value: number): void => {\r\n    setValue && setValue(roundValue(value));\r\n  };\r\n\r\n  const onConfirmSlider = (): void => {\r\n    const roundedValue = roundValue(value);\r\n    if (PHONE_OS === 'ios' && step && sliderRef.current) {\r\n      sliderRef.current.setNativeProps({ value: roundedValue });\r\n    }\r\n    onConfirm && onConfirm(roundedValue, updatedPainSymptoms);\r\n  };\r\n\r\n  const onChangePainSymptom = (pain: keyof PainSymptoms, value: boolean) => {\r\n    setPainSymptoms((prevState: PainSymptoms) => {\r\n      prevState[pain] = value;\r\n      return { ...prevState };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Modal isVisible={isVisible} onBackdropPress={onCancel}>\r\n      <View style={styles.container}>\r\n        <SubTitle isCenter text={title} style={styles.title} />\r\n        <Slider\r\n          minimumValue={min}\r\n          maximumValue={max}\r\n          minimumTrackTintColor={colors.primary}\r\n          step={PHONE_OS === 'ios' ? 0 : step}\r\n          value={value}\r\n          style={styles.slider}\r\n          thumbTintColor={colors.primary}\r\n          onValueChange={onValueChangeRound}\r\n        />\r\n        <SliderFooter type={type} />\r\n        {hasPainSymptoms && (\r\n          <SliderPainSymptoms\r\n            painSymptoms={updatedPainSymptoms}\r\n            onPressPainSymptom={onChangePainSymptom}\r\n          />\r\n        )}\r\n        <Button\r\n          text={i18n.t('signup.validate')}\r\n          onPress={onConfirmSlider}\r\n          isValidate\r\n        />\r\n      </View>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomSlider;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: colors.white,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    paddingHorizontal: layout.padding,\r\n    paddingTop: layout.padding * 2,\r\n    borderRadius: layout.buttons.borderRadius,\r\n  },\r\n  slider: {\r\n    width: '100%',\r\n    zIndex: 2,\r\n    marginTop: layout.padding / 2,\r\n  },\r\n  title: {\r\n    marginHorizontal: 0,\r\n  },\r\n});\r\n"],"mappings":";;;;;AAAA,OAAOA,KAAK,IAAkBC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC7D,OAAOC,KAAK,MAAM,oBAAoB;AAAC,OAAAC,MAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAGvC,OAAOC,QAAQ;AACf,OAAOC,MAAM;AACb,OAAOC,YAAY;AACnB,OAAOC,kBAAkB;AAIzB,OAAOC,MAAM;AACb,OAAOC,MAAM;AACb,OAAOC,IAAI;AACX,SAASC,aAAa,EAAEC,QAAQ;AAehC,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAAC,IAAA,EAWS;EAAA,IAVzBC,SAAS,GAAAD,IAAA,CAATC,SAAS;IACTC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;IACRC,SAAS,GAAAH,IAAA,CAATG,SAAS;IACTC,IAAI,GAAAJ,IAAA,CAAJI,IAAI;IACJC,YAAY,GAAAL,IAAA,CAAZK,YAAY;IACZC,IAAI,GAAAN,IAAA,CAAJM,IAAI;IACJC,GAAG,GAAAP,IAAA,CAAHO,GAAG;IACHC,GAAG,GAAAR,IAAA,CAAHQ,GAAG;IACHC,KAAK,GAAAT,IAAA,CAALS,KAAK;IACLC,eAAe,GAAAV,IAAA,CAAfU,eAAe;EAEf,IAAMC,SAAS,GAAG3B,MAAM,CAAgB,IAAI,CAAC;EAAC,IAAA4B,SAAA,GACpB3B,QAAQ,CAASoB,YAAY,CAAC;IAAAQ,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAjDG,KAAK,GAAAF,UAAA;IAAEG,QAAQ,GAAAH,UAAA;EAAA,IAAAI,UAAA,GACyBhC,QAAQ,CACrDY,aACF,CAAC;IAAAqB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAFME,mBAAmB,GAAAD,UAAA;IAAEE,eAAe,GAAAF,UAAA;EAI3C,IAAMG,UAAU,GAAG,SAAbA,UAAUA,CAAIN,KAAa,EAAa;IAC5C,IAAI,CAACX,IAAI,EAAE,OAAOW,KAAK;IAEvB,IAAMO,QAAQ,GAAG,CAAC,GAAGlB,IAAI;IACzB,OAAOmB,IAAI,CAACC,KAAK,CAACT,KAAK,GAAGX,IAAI,CAAC,GAAGkB,QAAQ;EAC5C,CAAC;EAED,IAAMG,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIV,KAAa,EAAW;IAClDC,QAAQ,IAAIA,QAAQ,CAACK,UAAU,CAACN,KAAK,CAAC,CAAC;EACzC,CAAC;EAED,IAAMW,eAAe,GAAG,SAAlBA,eAAeA,CAAA,EAAe;IAClC,IAAMC,YAAY,GAAGN,UAAU,CAACN,KAAK,CAAC;IACtC,IAAIjB,QAAQ,KAAK,KAAK,IAAIM,IAAI,IAAIO,SAAS,CAACiB,OAAO,EAAE;MACnDjB,SAAS,CAACiB,OAAO,CAACC,cAAc,CAAC;QAAEd,KAAK,EAAEY;MAAa,CAAC,CAAC;IAC3D;IACAxB,SAAS,IAAIA,SAAS,CAACwB,YAAY,EAAER,mBAAmB,CAAC;EAC3D,CAAC;EAED,IAAMW,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAIC,IAAwB,EAAEhB,KAAc,EAAK;IACxEK,eAAe,CAAC,UAACY,SAAuB,EAAK;MAC3CA,SAAS,CAACD,IAAI,CAAC,GAAGhB,KAAK;MACvB,OAAAkB,aAAA,KAAYD,SAAS;IACvB,CAAC,CAAC;EACJ,CAAC;EAED,OACEjD,KAAA,CAAAmD,aAAA,CAAChD,KAAK;IAACe,SAAS,EAAEA,SAAU;IAACkC,eAAe,EAAEjC,QAAS;IAAAkC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACrDzD,KAAA,CAAAmD,aAAA,CAAC7C,IAAI;IAACoD,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAP,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC5BzD,KAAA,CAAAmD,aAAA,CAAC5C,QAAQ;IAACsD,QAAQ;IAACC,IAAI,EAAEpC,KAAM;IAACgC,KAAK,EAAEC,MAAM,CAACjC,KAAM;IAAA2B,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,EACvDzD,KAAA,CAAAmD,aAAA,CAAC/C,MAAM;IACL2D,YAAY,EAAEvC,GAAI;IAClBwC,YAAY,EAAEvC,GAAI;IAClBwC,qBAAqB,EAAEtD,MAAM,CAACuD,OAAQ;IACtC7C,IAAI,EAAEN,QAAQ,KAAK,KAAK,GAAG,CAAC,GAAGM,IAAK;IACpCW,KAAK,EAAEA,KAAM;IACb0B,KAAK,EAAEC,MAAM,CAACQ,MAAO;IACrBC,cAAc,EAAEzD,MAAM,CAACuD,OAAQ;IAC/BG,aAAa,EAAE3B,kBAAmB;IAAAW,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACnC,CAAC,EACFzD,KAAA,CAAAmD,aAAA,CAAC1C,YAAY;IAACc,IAAI,EAAEA,IAAK;IAAA8B,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,EAC3B9B,eAAe,IACd3B,KAAA,CAAAmD,aAAA,CAACzC,kBAAkB;IACjB4D,YAAY,EAAElC,mBAAoB;IAClCmC,kBAAkB,EAAExB,mBAAoB;IAAAM,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACzC,CACF,EACDzD,KAAA,CAAAmD,aAAA,CAAC3C,MAAM;IACLsD,IAAI,EAAEjD,IAAI,CAAC2D,CAAC,CAAC,iBAAiB,CAAE;IAChCC,OAAO,EAAE9B,eAAgB;IACzB+B,UAAU;IAAArB,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACX,CACG,CACD,CAAC;AAEZ,CAAC;AAED,eAAezC,YAAY;AAE3B,IAAM2C,MAAM,GAAGtD,UAAU,CAACsE,MAAM,CAAC;EAC/Bf,SAAS,EAAE;IACTgB,eAAe,EAAEjE,MAAM,CAACkE,KAAK;IAC7BC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE,QAAQ;IACpBC,iBAAiB,EAAEpE,MAAM,CAACqE,OAAO;IACjCC,UAAU,EAAEtE,MAAM,CAACqE,OAAO,GAAG,CAAC;IAC9BE,YAAY,EAAEvE,MAAM,CAACwE,OAAO,CAACD;EAC/B,CAAC;EACDhB,MAAM,EAAE;IACNkB,KAAK,EAAE,MAAM;IACbC,MAAM,EAAE,CAAC;IACTC,SAAS,EAAE3E,MAAM,CAACqE,OAAO,GAAG;EAC9B,CAAC;EACDvD,KAAK,EAAE;IACL8D,gBAAgB,EAAE;EACpB;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}