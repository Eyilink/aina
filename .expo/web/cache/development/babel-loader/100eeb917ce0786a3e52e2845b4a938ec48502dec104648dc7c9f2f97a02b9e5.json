{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { NavigationStateContext } from \"./BaseNavigationContainer\";\nimport NavigationContext from \"./NavigationContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport StaticContainer from \"./StaticContainer\";\nimport EnsureSingleNavigator from \"./EnsureSingleNavigator\";\nexport default function SceneView(_ref) {\n  var screen = _ref.screen,\n    route = _ref.route,\n    navigation = _ref.navigation,\n    getState = _ref.getState,\n    setState = _ref.setState;\n  var navigatorKeyRef = React.useRef();\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n  var getCurrentState = React.useCallback(function () {\n    var state = getState();\n    var currentRoute = state.routes.find(function (r) {\n      return r.key === route.key;\n    });\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n  var setCurrentState = React.useCallback(function (child) {\n    var state = getState();\n    setState(_objectSpread({}, state, {\n      routes: state.routes.map(function (r) {\n        return r.key === route.key ? _objectSpread({}, r, {\n          state: child\n        }) : r;\n      })\n    }));\n  }, [getState, route.key, setState]);\n  var context = React.useMemo(function () {\n    return {\n      state: route.state,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey: getKey,\n      setKey: setKey\n    };\n  }, [getCurrentState, getKey, route.state, setCurrentState, setKey]);\n  return React.createElement(NavigationContext.Provider, {\n    value: navigation\n  }, React.createElement(NavigationRouteContext.Provider, {\n    value: route\n  }, React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, React.createElement(EnsureSingleNavigator, null, React.createElement(StaticContainer, {\n    name: screen.name,\n    render: screen.component || screen.children,\n    navigation: navigation,\n    route: route\n  }, 'component' in screen && screen.component !== undefined ? React.createElement(screen.component, {\n    navigation: navigation,\n    route: route\n  }) : 'children' in screen && screen.children !== undefined ? screen.children({\n    navigation: navigation,\n    route: route\n  }) : null)))));\n}","map":{"version":3,"names":["React","NavigationStateContext","NavigationContext","NavigationRouteContext","StaticContainer","EnsureSingleNavigator","SceneView","_ref","screen","route","navigation","getState","setState","navigatorKeyRef","useRef","getKey","useCallback","current","setKey","key","getCurrentState","state","currentRoute","routes","find","r","undefined","setCurrentState","child","_objectSpread","map","context","useMemo","createElement","Provider","value","name","render","component","children"],"sources":["C:\\Users\\HP\\Documents\\Ping\\pingaina\\node_modules\\@react-navigation\\core\\lib\\module\\SceneView.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Route,\n  ParamListBase,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport { NavigationStateContext } from './BaseNavigationContainer';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport StaticContainer from './StaticContainer';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport { NavigationProp, RouteConfig, EventMapBase } from './types';\n\ntype Props<\n  State extends NavigationState,\n  ScreenOptions extends object,\n  EventMap extends EventMapBase\n> = {\n  screen: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string> & {\n    state?: NavigationState | PartialState<NavigationState>;\n  };\n  getState: () => State;\n  setState: (state: State) => void;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends object,\n  EventMap extends EventMapBase\n>({\n  screen,\n  route,\n  navigation,\n  getState,\n  setState,\n}: Props<State, ScreenOptions, EventMap>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const context = React.useMemo(\n    () => ({\n      state: route.state,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n    }),\n    [getCurrentState, getKey, route.state, setCurrentState, setKey]\n  );\n\n  return (\n    <NavigationContext.Provider value={navigation}>\n      <NavigationRouteContext.Provider value={route}>\n        <NavigationStateContext.Provider value={context}>\n          <EnsureSingleNavigator>\n            <StaticContainer\n              name={screen.name}\n              // @ts-ignore\n              render={screen.component || screen.children}\n              navigation={navigation}\n              route={route}\n            >\n              {'component' in screen && screen.component !== undefined ? (\n                // @ts-ignore\n                <screen.component navigation={navigation} route={route} />\n              ) : 'children' in screen && screen.children !== undefined ? (\n                // @ts-ignore\n                screen.children({ navigation, route })\n              ) : null}\n            </StaticContainer>\n          </EnsureSingleNavigator>\n        </NavigationStateContext.Provider>\n      </NavigationRouteContext.Provider>\n    </NavigationContext.Provider>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}