{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\Ping\\\\pingaina\\\\src\\\\components\\\\atoms\\\\InputText.tsx\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { CodeField, Cursor, useBlurOnFulfill, useClearByFocusCell } from 'react-native-confirmation-code-field';\nimport layout from \"../../styles/layout\";\nimport colors from \"../../styles/colors\";\nvar InputText = function InputText(_ref) {\n  var onChange = _ref.onChange,\n    value = _ref.value,\n    cellCount = _ref.cellCount,\n    unit = _ref.unit;\n  var ref = useBlurOnFulfill({\n    value: value,\n    cellCount: cellCount\n  });\n  var _useClearByFocusCell = useClearByFocusCell({\n      value: value,\n      onChange: onChange\n    }),\n    _useClearByFocusCell2 = _slicedToArray(_useClearByFocusCell, 2),\n    props = _useClearByFocusCell2[0],\n    getCellOnLayoutHandler = _useClearByFocusCell2[1];\n  return React.createElement(CodeField, _extends({\n    ref: ref\n  }, props, {\n    autoFocus: true,\n    value: value,\n    onChangeText: onChange,\n    cellCount: cellCount,\n    rootStyle: styles.codeFiledRoot,\n    keyboardType: \"number-pad\",\n    renderCell: function renderCell(_ref2) {\n      var index = _ref2.index,\n        symbol = _ref2.symbol,\n        isFocused = _ref2.isFocused;\n      return React.createElement(View, {\n        onLayout: getCellOnLayoutHandler(index),\n        key: index,\n        style: [styles.cellRoot, isFocused && styles.focusCell],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: styles.cellText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }\n      }, symbol || (isFocused ? React.createElement(Cursor, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 37\n        }\n      }) : null)), unit && index === cellCount - 1 && React.createElement(Text, {\n        style: styles.unit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }\n      }, unit));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }));\n};\nexport default InputText;\nvar styles = StyleSheet.create({\n  unit: {\n    position: 'absolute',\n    bottom: 0,\n    right: -layout.padding * 1.5\n  },\n  codeFiledRoot: {\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    marginTop: layout.padding\n  },\n  cellRoot: {\n    width: 50,\n    height: 50,\n    marginHorizontal: 4,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderBottomColor: colors.grey,\n    borderBottomWidth: 1\n  },\n  cellText: {\n    color: colors.black,\n    fontSize: 36,\n    textAlign: 'center'\n  },\n  focusCell: {\n    borderBottomColor: colors.black,\n    borderBottomWidth: 2\n  }\n});","map":{"version":3,"names":["React","StyleSheet","Text","View","CodeField","Cursor","useBlurOnFulfill","useClearByFocusCell","layout","colors","InputText","_ref","onChange","value","cellCount","unit","ref","_useClearByFocusCell","_useClearByFocusCell2","_slicedToArray","props","getCellOnLayoutHandler","createElement","_extends","autoFocus","onChangeText","rootStyle","styles","codeFiledRoot","keyboardType","renderCell","_ref2","index","symbol","isFocused","onLayout","key","style","cellRoot","focusCell","__source","fileName","_jsxFileName","lineNumber","columnNumber","cellText","create","position","bottom","right","padding","marginLeft","marginRight","marginTop","width","height","marginHorizontal","justifyContent","alignItems","borderBottomColor","grey","borderBottomWidth","color","black","fontSize","textAlign"],"sources":["C:/Users/HP/Documents/Ping/pingaina/src/components/atoms/InputText.tsx"],"sourcesContent":["import React, { ReactElement } from 'react';\r\nimport { StyleSheet, Text, View } from 'react-native';\r\nimport {\r\n  CodeField,\r\n  Cursor,\r\n  useBlurOnFulfill,\r\n  useClearByFocusCell,\r\n} from 'react-native-confirmation-code-field';\r\n\r\nimport layout from '@styles/layout';\r\nimport colors from '@styles/colors';\r\n\r\ntype Props = {\r\n  value: string;\r\n  cellCount: number;\r\n  onChange: (text: string) => void;\r\n  unit?: string;\r\n};\r\n\r\nconst InputText = ({\r\n  onChange,\r\n  value,\r\n  cellCount,\r\n  unit,\r\n}: Props): ReactElement => {\r\n  const ref = useBlurOnFulfill({ value, cellCount });\r\n  const [props, getCellOnLayoutHandler] = useClearByFocusCell({\r\n    value,\r\n    onChange,\r\n  });\r\n\r\n  return (\r\n    <CodeField\r\n      ref={ref}\r\n      {...props}\r\n      autoFocus\r\n      value={value}\r\n      onChangeText={onChange}\r\n      cellCount={cellCount}\r\n      rootStyle={styles.codeFiledRoot}\r\n      keyboardType=\"number-pad\"\r\n      renderCell={({ index, symbol, isFocused }): ReactElement => (\r\n        <View\r\n          onLayout={getCellOnLayoutHandler(index)}\r\n          key={index}\r\n          style={[styles.cellRoot, isFocused && styles.focusCell]}\r\n        >\r\n          <Text style={styles.cellText}>\r\n            {symbol || (isFocused ? <Cursor /> : null)}\r\n          </Text>\r\n          {unit && index === cellCount - 1 && (\r\n            <Text style={styles.unit}>{unit}</Text>\r\n          )}\r\n        </View>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default InputText;\r\n\r\nconst styles = StyleSheet.create({\r\n  unit: {\r\n    position: 'absolute',\r\n    bottom: 0,\r\n    right: -layout.padding * 1.5,\r\n  },\r\n  codeFiledRoot: {\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto',\r\n    marginTop: layout.padding,\r\n  },\r\n  cellRoot: {\r\n    width: 50,\r\n    height: 50,\r\n    marginHorizontal: 4,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    borderBottomColor: colors.grey,\r\n    borderBottomWidth: 1,\r\n  },\r\n  cellText: {\r\n    color: colors.black,\r\n    fontSize: 36,\r\n    textAlign: 'center',\r\n  },\r\n  focusCell: {\r\n    borderBottomColor: colors.black,\r\n    borderBottomWidth: 2,\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}