{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hibab\\\\Downloads\\\\aina19\\\\pingaina\\\\src\\\\components\\\\molecules\\\\HistoryCharts.tsx\";\nimport React, { useEffect, useRef } from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as shape from 'd3-shape';\nimport * as scale from 'd3-scale';\nimport { LineChart, YAxis } from 'react-native-svg-charts';\nimport { Circle, G, Line } from 'react-native-svg';\nimport { format, fromUnixTime } from 'date-fns';\nimport fr from 'date-fns/locale/fr';\nimport { fillGapsInReports, getNumberOfSymptomsFromReport } from \"../../helpers/utils\";\nimport i18n from \"../../i18n/i18n\";\nimport colors from \"../../styles/colors\";\nimport fonts from \"../../styles/fonts\";\nimport layout from \"../../styles/layout\";\nimport { SYMPTOMS } from \"../../constants/constants\";\nvar GRAPH_HEIGHT = 200;\nvar COLUMN_WIDTH = 45;\nvar COLUMN_HEIGHT = 30;\nvar LEFT_LABELS_CONTAINER_WIDTH = 80;\nvar HistoryCharts = function HistoryCharts(_ref) {\n  var reports = _ref.reports,\n    isFocused = _ref.isFocused;\n  var refScrollView = useRef(null);\n  useEffect(function () {\n    if ((refScrollView === null || refScrollView === void 0 ? void 0 : refScrollView.current) && isFocused) refScrollView.current.scrollToEnd({\n      animated: true\n    });\n  });\n  var reportsWithFilledGaps = fillGapsInReports(reports);\n  var contentInset = {\n    top: 20,\n    bottom: 20,\n    left: reportsWithFilledGaps.length * COLUMN_WIDTH / reportsWithFilledGaps.length\n  };\n  var Decorator = function Decorator(_ref2) {\n    var x = _ref2.x,\n      y = _ref2.y,\n      data = _ref2.data;\n    return data.map(function (report, index) {\n      if (!report.temperature) return null;\n      return React.createElement(Circle, {\n        key: index,\n        cx: x(index - 0.5),\n        cy: y(report.temperature),\n        r: 6,\n        fill: colors.primary,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }\n      });\n    });\n  };\n  var CustomGrid = function CustomGrid(_ref3) {\n    var x = _ref3.x,\n      data = _ref3.data;\n    return React.createElement(G, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }, data.map(function (_, index) {\n      return React.createElement(Line, {\n        key: index,\n        y1: '0%',\n        y2: '100%',\n        x1: x(index),\n        x2: x(index),\n        stroke: colors.greyLight,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }\n      });\n    }));\n  };\n  return React.createElement(View, {\n    style: styles.chart,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.labelsContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, React.createElement(YAxis, {\n    data: reportsWithFilledGaps,\n    contentInset: contentInset,\n    svg: {\n      fill: colors.black,\n      fontSize: fonts.label.fontSize\n    },\n    numberOfTicks: 4,\n    min: 37,\n    max: 40,\n    formatLabel: function formatLabel(temperature) {\n      return \"\" + temperature + i18n.t('commons.units.degrees');\n    },\n    style: styles.temperatureLabelsContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: styles.symptomSidebarContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    key: 'date-label',\n    style: styles.symptomLabelContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }), SYMPTOMS.map(function (symptom) {\n    return React.createElement(View, {\n      key: symptom + \"-label\",\n      style: styles.symptomLabelContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: styles.symptomLabel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }\n    }, symptom === 'fever' ? i18n.t('report.temperature') : i18n.t(\"report.\" + symptom)));\n  }))), React.createElement(ScrollView, {\n    ref: refScrollView,\n    horizontal: true,\n    persistentScrollbar: true,\n    scrollEventThrottle: 200,\n    decelerationRate: \"fast\",\n    contentContainerStyle: [styles.scrollViewContainer, {\n      width: reportsWithFilledGaps.length * COLUMN_WIDTH\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.lineChartContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, React.createElement(LineChart, {\n    style: [styles.lineChart, {\n      width: reportsWithFilledGaps.length * COLUMN_WIDTH\n    }],\n    data: reportsWithFilledGaps,\n    svg: {\n      stroke: colors.grey,\n      strokeWidth: 2,\n      x: -COLUMN_WIDTH / 2\n    },\n    contentInset: contentInset,\n    curve: shape.curveNatural,\n    animate: true,\n    yMin: 37,\n    yMax: 40,\n    yAccessor: function yAccessor(_ref4) {\n      var item = _ref4.item;\n      return item.temperature || 37;\n    },\n    xAccessor: function xAccessor(_ref5) {\n      var index = _ref5.index;\n      return index;\n    },\n    xScale: scale.scaleTime,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, React.createElement(CustomGrid, {\n    belowChart: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }), React.createElement(Decorator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }))), React.createElement(View, {\n    style: styles.symptomsRow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  }, reportsWithFilledGaps.map(function (report) {\n    return React.createElement(View, {\n      key: \"date-\" + report.date,\n      style: [styles.badgeContainer, {\n        backgroundColor: !report.isFilled ? colors.grey : getNumberOfSymptomsFromReport(report) === 0 ? colors.green : colors.primary\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 15\n      }\n    }, React.createElement(Text, {\n      style: styles.date,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 19\n      }\n    }, format(fromUnixTime(report.date), 'dd/MM', {\n      locale: fr\n    })));\n  })), SYMPTOMS.map(function (symptom) {\n    return React.createElement(View, {\n      key: symptom + \"-row\",\n      style: styles.symptomsRow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }\n    }, reportsWithFilledGaps.map(function (report) {\n      return React.createElement(View, {\n        key: \"report-\" + report.date,\n        style: styles.badgeContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 19\n        }\n      }, report[symptom] && report.isFilled && React.createElement(View, {\n        style: styles.badge,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 23\n        }\n      }, report[symptom + \"Intensity\"] && React.createElement(Text, {\n        style: styles.intensity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 27\n        }\n      }, report[symptom + \"Intensity\"]), symptom === 'fever' && report.fever && React.createElement(Text, {\n        style: styles.intensity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 27\n        }\n      }, report.temperature)), !report[symptom] && report.isFilled && React.createElement(View, {\n        style: styles.badgeOK,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 23\n        }\n      }));\n    }));\n  })));\n};\nexport default HistoryCharts;\nvar styles = StyleSheet.create({\n  chart: {\n    flexDirection: 'row',\n    borderTopColor: colors.greyLight,\n    borderTopWidth: 1,\n    marginBottom: layout.padding,\n    marginHorizontal: layout.padding\n  },\n  lineChartContainer: {\n    flexDirection: 'row'\n  },\n  lineChart: {\n    height: GRAPH_HEIGHT,\n    borderBottomColor: colors.grey,\n    borderBottomWidth: 1\n  },\n  labelsContainer: {\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: LEFT_LABELS_CONTAINER_WIDTH,\n    borderRightColor: colors.greyLight,\n    borderRightWidth: 1,\n    borderLeftColor: colors.greyLight,\n    borderLeftWidth: 1\n  },\n  temperatureLabelsContainer: {\n    height: GRAPH_HEIGHT,\n    borderBottomColor: colors.grey,\n    borderBottomWidth: 1,\n    width: LEFT_LABELS_CONTAINER_WIDTH\n  },\n  symptomSidebarContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  symptomLabelContainer: {\n    height: 30,\n    justifyContent: 'center',\n    borderBottomColor: colors.greyLight,\n    borderBottomWidth: 1,\n    width: LEFT_LABELS_CONTAINER_WIDTH\n  },\n  symptomLabel: {\n    fontSize: fonts.label.fontSize,\n    fontFamily: fonts.label.fontFamily,\n    color: colors.black,\n    textAlign: 'left',\n    paddingLeft: 2\n  },\n  scrollViewContainer: {\n    flexDirection: 'column'\n  },\n  symptomsRow: {\n    height: COLUMN_HEIGHT,\n    flexDirection: 'row',\n    alignItems: 'center',\n    borderBottomColor: colors.greyLight,\n    borderBottomWidth: 1\n  },\n  badgeContainer: {\n    height: COLUMN_HEIGHT,\n    width: COLUMN_WIDTH,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRightColor: colors.greyLight,\n    borderRightWidth: 1\n  },\n  badge: {\n    backgroundColor: colors.primary,\n    height: COLUMN_HEIGHT - 10,\n    width: COLUMN_WIDTH - 10,\n    borderRadius: layout.buttons.borderRadius / 2,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  badgeOK: {\n    backgroundColor: colors.green,\n    height: COLUMN_HEIGHT - 20,\n    width: COLUMN_HEIGHT - 20,\n    borderRadius: COLUMN_HEIGHT - 20 / 2,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  intensity: {\n    textAlign: 'center',\n    color: colors.white,\n    fontSize: fonts.label.fontSize\n  },\n  date: {\n    fontFamily: fonts.label.fontFamily,\n    fontSize: fonts.label.fontSize,\n    color: colors.white\n  }\n});","map":{"version":3,"names":["React","useEffect","useRef","ScrollView","StyleSheet","Text","View","shape","scale","LineChart","YAxis","Circle","G","Line","format","fromUnixTime","fr","fillGapsInReports","getNumberOfSymptomsFromReport","i18n","colors","fonts","layout","SYMPTOMS","GRAPH_HEIGHT","COLUMN_WIDTH","COLUMN_HEIGHT","LEFT_LABELS_CONTAINER_WIDTH","HistoryCharts","_ref","reports","isFocused","refScrollView","current","scrollToEnd","animated","reportsWithFilledGaps","contentInset","top","bottom","left","length","Decorator","_ref2","x","y","data","map","report","index","temperature","createElement","key","cx","cy","r","fill","primary","__source","fileName","_jsxFileName","lineNumber","columnNumber","CustomGrid","_ref3","_","y1","y2","x1","x2","stroke","greyLight","style","styles","chart","labelsContainer","svg","black","fontSize","label","numberOfTicks","min","max","formatLabel","t","temperatureLabelsContainer","symptomSidebarContainer","symptomLabelContainer","symptom","symptomLabel","ref","horizontal","persistentScrollbar","scrollEventThrottle","decelerationRate","contentContainerStyle","scrollViewContainer","width","lineChartContainer","lineChart","grey","strokeWidth","curve","curveNatural","animate","yMin","yMax","yAccessor","_ref4","item","xAccessor","_ref5","xScale","scaleTime","belowChart","symptomsRow","date","badgeContainer","backgroundColor","isFilled","green","locale","badge","intensity","fever","badgeOK","create","flexDirection","borderTopColor","borderTopWidth","marginBottom","padding","marginHorizontal","height","borderBottomColor","borderBottomWidth","justifyContent","alignItems","borderRightColor","borderRightWidth","borderLeftColor","borderLeftWidth","fontFamily","color","textAlign","paddingLeft","borderRadius","buttons","white"],"sources":["C:/Users/hibab/Downloads/aina19/pingaina/src/components/molecules/HistoryCharts.tsx"],"sourcesContent":["import React, { ReactElement, useEffect, useRef } from 'react';\r\nimport { ScrollView, StyleSheet, Text, View } from 'react-native';\r\nimport * as shape from 'd3-shape';\r\nimport * as scale from 'd3-scale';\r\nimport { LineChart, YAxis } from 'react-native-svg-charts';\r\nimport { Circle, G, Line } from 'react-native-svg';\r\nimport { format, fromUnixTime } from 'date-fns';\r\nimport fr from 'date-fns/locale/fr';\r\n\r\nimport { Report } from '@store/types';\r\nimport {\r\n  fillGapsInReports,\r\n  getNumberOfSymptomsFromReport,\r\n} from '@helpers/utils';\r\n\r\nimport i18n from '@i18n/i18n';\r\nimport colors from '@styles/colors';\r\nimport fonts from '@styles/fonts';\r\nimport layout from '@styles/layout';\r\nimport { SYMPTOMS } from '@constants/constants';\r\n\r\nconst GRAPH_HEIGHT = 200;\r\nconst COLUMN_WIDTH = 45;\r\nconst COLUMN_HEIGHT = 30;\r\nconst LEFT_LABELS_CONTAINER_WIDTH = 80;\r\n\r\ntype DecoratorProps = {\r\n  x: (index: number) => 'string | number | undefined';\r\n  y: (temperature: number) => 'string | number | undefined';\r\n  data: Report[];\r\n};\r\n\r\ntype CustomGridProps = {\r\n  x: (index: number) => 'string | number | undefined';\r\n  data: Report[];\r\n};\r\n\r\ntype Props = {\r\n  isFocused: boolean;\r\n  reports: Report[];\r\n};\r\n\r\nconst HistoryCharts = ({ reports, isFocused }: Props): ReactElement => {\r\n  const refScrollView = useRef<ScrollView>(null);\r\n\r\n  useEffect(() => {\r\n    if (refScrollView?.current && isFocused)\r\n      refScrollView.current.scrollToEnd({ animated: true });\r\n  });\r\n\r\n  const reportsWithFilledGaps = fillGapsInReports(reports);\r\n\r\n  const contentInset = {\r\n    top: 20,\r\n    bottom: 20,\r\n    left:\r\n      (reportsWithFilledGaps.length * COLUMN_WIDTH) /\r\n      reportsWithFilledGaps.length,\r\n  };\r\n\r\n  const Decorator = ({ x, y, data }: DecoratorProps) => {\r\n    return data.map((report: Report, index: number) => {\r\n      if (!report.temperature) return null;\r\n      return (\r\n        <Circle\r\n          key={index}\r\n          cx={x(index - 0.5)}\r\n          cy={y(report.temperature)}\r\n          r={6}\r\n          fill={colors.primary}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  const CustomGrid = ({ x, data }: CustomGridProps) => {\r\n    return (\r\n      <G>\r\n        {\r\n          // Vertical grid\r\n          data.map((_, index) => {\r\n            return (\r\n              <Line\r\n                key={index}\r\n                y1={'0%'}\r\n                y2={'100%'}\r\n                x1={x(index)}\r\n                x2={x(index)}\r\n                stroke={colors.greyLight}\r\n              />\r\n            );\r\n          })\r\n        }\r\n      </G>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <View style={styles.chart}>\r\n      <View style={styles.labelsContainer}>\r\n        <YAxis\r\n          data={reportsWithFilledGaps}\r\n          contentInset={contentInset}\r\n          svg={{ fill: colors.black, fontSize: fonts.label.fontSize }}\r\n          numberOfTicks={4}\r\n          min={37}\r\n          max={40}\r\n          formatLabel={(temperature: number) =>\r\n            `${temperature}${i18n.t('commons.units.degrees')}`\r\n          }\r\n          style={styles.temperatureLabelsContainer}\r\n        />\r\n        <View style={styles.symptomSidebarContainer}>\r\n          <View key={'date-label'} style={styles.symptomLabelContainer} />\r\n          {SYMPTOMS.map((symptom) => (\r\n            <View key={`${symptom}-label`} style={styles.symptomLabelContainer}>\r\n              <Text style={styles.symptomLabel}>\r\n                {symptom === 'fever'\r\n                  ? i18n.t('report.temperature')\r\n                  : i18n.t(`report.${symptom}`)}\r\n              </Text>\r\n            </View>\r\n          ))}\r\n        </View>\r\n      </View>\r\n      <ScrollView\r\n        ref={refScrollView}\r\n        horizontal={true}\r\n        persistentScrollbar\r\n        scrollEventThrottle={200}\r\n        decelerationRate=\"fast\"\r\n        contentContainerStyle={[\r\n          styles.scrollViewContainer,\r\n          { width: reportsWithFilledGaps.length * COLUMN_WIDTH },\r\n        ]}\r\n      >\r\n        <View style={styles.lineChartContainer}>\r\n          <LineChart\r\n            style={[\r\n              styles.lineChart,\r\n              { width: reportsWithFilledGaps.length * COLUMN_WIDTH },\r\n            ]}\r\n            data={reportsWithFilledGaps}\r\n            svg={{ stroke: colors.grey, strokeWidth: 2, x: -COLUMN_WIDTH / 2 }}\r\n            contentInset={contentInset}\r\n            curve={shape.curveNatural}\r\n            animate\r\n            yMin={37}\r\n            yMax={40}\r\n            yAccessor={({ item }) => item.temperature || 37}\r\n            xAccessor={({ index }) => index}\r\n            xScale={scale.scaleTime}\r\n          >\r\n            <CustomGrid belowChart={true} />\r\n            <Decorator />\r\n          </LineChart>\r\n        </View>\r\n        <View style={styles.symptomsRow}>\r\n          {reportsWithFilledGaps.map((report: Report) => {\r\n            return (\r\n              <View\r\n                key={`date-${report.date}`}\r\n                style={[\r\n                  styles.badgeContainer,\r\n                  {\r\n                    backgroundColor: !report.isFilled\r\n                      ? colors.grey\r\n                      : getNumberOfSymptomsFromReport(report) === 0\r\n                      ? colors.green\r\n                      : colors.primary,\r\n                  },\r\n                ]}\r\n              >\r\n                {\r\n                  <Text style={styles.date}>\r\n                    {format(fromUnixTime(report.date), 'dd/MM', { locale: fr })}\r\n                  </Text>\r\n                }\r\n              </View>\r\n            );\r\n          })}\r\n        </View>\r\n        {SYMPTOMS.map((symptom) => {\r\n          return (\r\n            <View key={`${symptom}-row`} style={styles.symptomsRow}>\r\n              {reportsWithFilledGaps.map((report: Report) => {\r\n                return (\r\n                  <View\r\n                    key={`report-${report.date}`}\r\n                    style={styles.badgeContainer}\r\n                  >\r\n                    {report[symptom] && report.isFilled && (\r\n                      <View style={styles.badge}>\r\n                        {report[`${symptom}Intensity`] && (\r\n                          <Text style={styles.intensity}>\r\n                            {report[`${symptom}Intensity`]}\r\n                          </Text>\r\n                        )}\r\n                        {symptom === 'fever' && report.fever && (\r\n                          <Text style={styles.intensity}>\r\n                            {report.temperature}\r\n                          </Text>\r\n                        )}\r\n                      </View>\r\n                    )}\r\n                    {!report[symptom] && report.isFilled && (\r\n                      <View style={styles.badgeOK} />\r\n                    )}\r\n                  </View>\r\n                );\r\n              })}\r\n            </View>\r\n          );\r\n        })}\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default HistoryCharts;\r\n\r\nconst styles = StyleSheet.create({\r\n  chart: {\r\n    flexDirection: 'row',\r\n    borderTopColor: colors.greyLight,\r\n    borderTopWidth: 1,\r\n    marginBottom: layout.padding,\r\n    marginHorizontal: layout.padding,\r\n  },\r\n  lineChartContainer: {\r\n    flexDirection: 'row',\r\n  },\r\n  lineChart: {\r\n    height: GRAPH_HEIGHT,\r\n    borderBottomColor: colors.grey,\r\n    borderBottomWidth: 1,\r\n  },\r\n  labelsContainer: {\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    width: LEFT_LABELS_CONTAINER_WIDTH,\r\n    borderRightColor: colors.greyLight,\r\n    borderRightWidth: 1,\r\n    borderLeftColor: colors.greyLight,\r\n    borderLeftWidth: 1,\r\n  },\r\n  temperatureLabelsContainer: {\r\n    height: GRAPH_HEIGHT,\r\n    borderBottomColor: colors.grey,\r\n    borderBottomWidth: 1,\r\n    width: LEFT_LABELS_CONTAINER_WIDTH,\r\n  },\r\n  symptomSidebarContainer: {\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  symptomLabelContainer: {\r\n    height: 30,\r\n    justifyContent: 'center',\r\n    borderBottomColor: colors.greyLight,\r\n    borderBottomWidth: 1,\r\n    width: LEFT_LABELS_CONTAINER_WIDTH,\r\n  },\r\n  symptomLabel: {\r\n    fontSize: fonts.label.fontSize,\r\n    fontFamily: fonts.label.fontFamily,\r\n    color: colors.black,\r\n    textAlign: 'left',\r\n    paddingLeft: 2,\r\n  },\r\n  scrollViewContainer: {\r\n    flexDirection: 'column',\r\n  },\r\n  symptomsRow: {\r\n    height: COLUMN_HEIGHT,\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    borderBottomColor: colors.greyLight,\r\n    borderBottomWidth: 1,\r\n  },\r\n  badgeContainer: {\r\n    height: COLUMN_HEIGHT,\r\n    width: COLUMN_WIDTH,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    borderRightColor: colors.greyLight,\r\n    borderRightWidth: 1,\r\n  },\r\n  badge: {\r\n    backgroundColor: colors.primary,\r\n    height: COLUMN_HEIGHT - 10,\r\n    width: COLUMN_WIDTH - 10,\r\n    borderRadius: layout.buttons.borderRadius / 2,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  badgeOK: {\r\n    backgroundColor: colors.green,\r\n    height: COLUMN_HEIGHT - 20,\r\n    width: COLUMN_HEIGHT - 20,\r\n    borderRadius: COLUMN_HEIGHT - 20 / 2,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  intensity: {\r\n    textAlign: 'center',\r\n    color: colors.white,\r\n    fontSize: fonts.label.fontSize,\r\n  },\r\n  date: {\r\n    fontFamily: fonts.label.fontFamily,\r\n    fontSize: fonts.label.fontSize,\r\n    color: colors.white,\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}