{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useMemo, useRef } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar findIndex = function findIndex(_ref, map) {\n  var locationX = _ref.locationX,\n    locationY = _ref.locationY;\n  for (var _i = 0, _Object$entries = Object.entries(map); _i < _Object$entries.length; _i++) {\n    var _ref2 = _Object$entries[_i];\n    var _ref3 = _slicedToArray(_ref2, 2);\n    var index = _ref3[0];\n    var _ref3$ = _ref3[1];\n    var x = _ref3$.x;\n    var y = _ref3$.y;\n    var xEnd = _ref3$.xEnd;\n    var yEnd = _ref3$.yEnd;\n    if (x < locationX && locationX < xEnd && y < locationY && locationY < yEnd) {\n      return parseInt(index, 10);\n    }\n  }\n  return -1;\n};\nvar useClearByFocusCell = function useClearByFocusCell(options) {\n  var valueRef = useRef(options);\n  var cellsLayouts = useRef({});\n  valueRef.current = options;\n  var clearCodeByCoords = function clearCodeByCoords(coords) {\n    var index = findIndex(coords, cellsLayouts.current);\n    if (index !== -1) {\n      var _valueRef$current = valueRef.current,\n        value = _valueRef$current.value,\n        setValue = _valueRef$current.setValue;\n      var text = (value || '').slice(0, index);\n      setValue(text);\n    }\n  };\n  var getCellOnLayoutHandler = function getCellOnLayoutHandler(index) {\n    return function (event) {\n      var _event$nativeEvent$la = event.nativeEvent.layout,\n        width = _event$nativeEvent$la.width,\n        height = _event$nativeEvent$la.height,\n        x = _event$nativeEvent$la.x,\n        y = _event$nativeEvent$la.y;\n      cellsLayouts.current[\"\" + index] = {\n        x: x,\n        xEnd: x + width,\n        y: y,\n        yEnd: y + height\n      };\n    };\n  };\n  var onPress = function onPress(event) {\n    return clearCodeByCoords(event.nativeEvent);\n  };\n  var onClick = function onClick(e) {\n    var offset = e.target.getClientRects()[0];\n    var locationX = e.clientX - offset.left;\n    var locationY = e.clientY - offset.top;\n    clearCodeByCoords({\n      locationX: locationX,\n      locationY: locationY\n    });\n  };\n  return [useMemo(function () {\n    return Platform.OS === 'web' ? {\n      onClick: onClick\n    } : {\n      onPress: onPress\n    };\n  }, []), getCellOnLayoutHandler];\n};\nexport default useClearByFocusCell;","map":{"version":3,"names":["useMemo","useRef","Platform","findIndex","_ref","map","locationX","locationY","_i","_Object$entries","Object","entries","length","_ref2","_ref3","_slicedToArray","index","_ref3$","x","y","xEnd","yEnd","parseInt","useClearByFocusCell","options","valueRef","cellsLayouts","current","clearCodeByCoords","coords","_valueRef$current","value","setValue","text","slice","getCellOnLayoutHandler","event","_event$nativeEvent$la","nativeEvent","layout","width","height","onPress","onClick","e","offset","target","getClientRects","clientX","left","clientY","top","OS"],"sources":["C:/Users/HP/Documents/Ping/pingaina/node_modules/react-native-confirmation-code-field/lib/useClearByFocusCell.js"],"sourcesContent":["import { useMemo, useRef } from 'react';\nimport { Platform } from 'react-native';\nconst findIndex = ({ locationX, locationY }, map) => {\n    for (const [index, { x, y, xEnd, yEnd }] of Object.entries(map)) {\n        if (x < locationX &&\n            locationX < xEnd &&\n            y < locationY &&\n            locationY < yEnd) {\n            return parseInt(index, 10);\n        }\n    }\n    return -1;\n};\nconst useClearByFocusCell = (options) => {\n    const valueRef = useRef(options);\n    const cellsLayouts = useRef({});\n    valueRef.current = options;\n    const clearCodeByCoords = (coords) => {\n        const index = findIndex(coords, cellsLayouts.current);\n        if (index !== -1) {\n            const { value, setValue } = valueRef.current;\n            const text = (value || '').slice(0, index);\n            setValue(text);\n        }\n    };\n    const getCellOnLayoutHandler = (index) => (event) => {\n        const { width, height, x, y } = event.nativeEvent.layout;\n        cellsLayouts.current[`${index}`] = {\n            x,\n            xEnd: x + width,\n            y,\n            yEnd: y + height,\n        };\n    };\n    const onPress = (event) => clearCodeByCoords(event.nativeEvent);\n    // For support react-native-web\n    const onClick = (e) => {\n        const offset = e.target.getClientRects()[0];\n        const locationX = e.clientX - offset.left;\n        const locationY = e.clientY - offset.top;\n        clearCodeByCoords({ locationX, locationY });\n    };\n    return [\n        useMemo(() => (Platform.OS === 'web' ? { onClick } : { onPress }), \n        // eslint-disable-next-line\n        []),\n        getCellOnLayoutHandler,\n    ];\n};\nexport default useClearByFocusCell;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}