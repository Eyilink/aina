{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Notifications } from 'expo';\nimport * as Permissions from 'expo-permissions';\nimport Constants from 'expo-constants';\nimport { fromUnixTime } from 'date-fns';\nimport i18n from \"../i18n/i18n\";\nimport { alertError } from \"./utils\";\nimport { PHONE_OS } from \"../constants/constants\";\nexport var registerForPushNotificationsAsync = function registerForPushNotificationsAsync() {\n  var token, _await$Permissions$ge, existingStatus, finalStatus, _await$Permissions$as, status;\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          token = null;\n          if (!Constants.isDevice) {\n            _context.next = 27;\n            break;\n          }\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n        case 4:\n          _await$Permissions$ge = _context.sent;\n          existingStatus = _await$Permissions$ge.status;\n          finalStatus = existingStatus;\n          if (!(existingStatus !== 'granted')) {\n            _context.next = 13;\n            break;\n          }\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n        case 10:\n          _await$Permissions$as = _context.sent;\n          status = _await$Permissions$as.status;\n          finalStatus = status;\n        case 13:\n          if (!(finalStatus !== 'granted')) {\n            _context.next = 16;\n            break;\n          }\n          alertError({\n            title: i18n.t('commons.attention'),\n            message: i18n.t('commons.errors.notifications')\n          });\n          return _context.abrupt(\"return\", null);\n        case 16:\n          _context.prev = 16;\n          _context.next = 19;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n        case 19:\n          token = _context.sent;\n          _context.next = 25;\n          break;\n        case 22:\n          _context.prev = 22;\n          _context.t0 = _context[\"catch\"](16);\n          alert(_context.t0);\n        case 25:\n          _context.next = 28;\n          break;\n        case 27:\n          alert('Must use physical device for Push Notifications');\n        case 28:\n          if (PHONE_OS === 'android') {\n            Notifications.createChannelAndroidAsync('default', {\n              name: 'default',\n              sound: true,\n              priority: 'max',\n              vibrate: [0, 250, 250, 250]\n            });\n          }\n          return _context.abrupt(\"return\", token);\n        case 30:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[16, 22]], Promise);\n};\nexport var scheduleLocalNotification = function scheduleLocalNotification(_ref) {\n  var date, schedulingOptions, localNotification;\n  return _regeneratorRuntime.async(function scheduleLocalNotification$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          date = _ref.date;\n          schedulingOptions = {\n            time: fromUnixTime(date),\n            repeat: 'day'\n          };\n          localNotification = {\n            title: i18n.t('notification.title'),\n            body: i18n.t('notification.message'),\n            ios: {\n              sound: true\n            },\n            android: {\n              sound: true,\n              priority: 'high',\n              vibrate: true\n            }\n          };\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(Notifications.cancelAllScheduledNotificationsAsync());\n        case 5:\n          Notifications.scheduleLocalNotificationAsync(localNotification, schedulingOptions);\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"names":["Notifications","Permissions","Constants","fromUnixTime","i18n","alertError","PHONE_OS","registerForPushNotificationsAsync","token","_await$Permissions$ge","existingStatus","finalStatus","_await$Permissions$as","status","_regeneratorRuntime","async","registerForPushNotificationsAsync$","_context","prev","next","isDevice","awrap","getAsync","NOTIFICATIONS","sent","askAsync","title","t","message","abrupt","getExpoPushTokenAsync","t0","alert","createChannelAndroidAsync","name","sound","priority","vibrate","stop","Promise","scheduleLocalNotification","_ref","date","schedulingOptions","localNotification","scheduleLocalNotification$","_context2","time","repeat","body","ios","android","cancelAllScheduledNotificationsAsync","scheduleLocalNotificationAsync"],"sources":["C:/Users/HP/Documents/Ping/pingaina/src/helpers/notifications.ts"],"sourcesContent":["import { Notifications } from 'expo';\r\nimport * as Permissions from 'expo-permissions';\r\nimport Constants from 'expo-constants';\r\nimport { fromUnixTime } from 'date-fns';\r\n\r\nimport i18n from '@i18n/i18n';\r\nimport { alertError } from '@helpers/utils';\r\nimport { PHONE_OS } from '@constants/constants';\r\n\r\nexport const registerForPushNotificationsAsync = async (): Promise<\r\n  string | null\r\n> => {\r\n  let token = null;\r\n\r\n  // Check that we are not on a emulator\r\n  if (Constants.isDevice) {\r\n    const { status: existingStatus } = await Permissions.getAsync(\r\n      Permissions.NOTIFICATIONS,\r\n    );\r\n    let finalStatus = existingStatus;\r\n\r\n    // Only ask if permissions have not already been determined, because\r\n    // iOS won't necessarily prompt the user a second time.\r\n    if (existingStatus !== 'granted') {\r\n      // Android remote notification permissions are granted during the app\r\n      // install, so this will only ask on iOS\r\n      const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\r\n      finalStatus = status;\r\n    }\r\n\r\n    // Stop here if the user did not grant permissions\r\n    if (finalStatus !== 'granted') {\r\n      alertError({\r\n        title: i18n.t('commons.attention'),\r\n        message: i18n.t('commons.errors.notifications'),\r\n      });\r\n      return null;\r\n    }\r\n\r\n    // Get the token that uniquely identifies this device\r\n    try {\r\n      token = await Notifications.getExpoPushTokenAsync();\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  } else {\r\n    alert('Must use physical device for Push Notifications');\r\n  }\r\n\r\n  if (PHONE_OS === 'android') {\r\n    Notifications.createChannelAndroidAsync('default', {\r\n      name: 'default',\r\n      sound: true,\r\n      priority: 'max',\r\n      vibrate: [0, 250, 250, 250],\r\n    });\r\n  }\r\n\r\n  return token;\r\n};\r\n\r\nexport const scheduleLocalNotification = async ({\r\n  date,\r\n}: {\r\n  date: number;\r\n}): Promise<void> => {\r\n  const schedulingOptions = {\r\n    time: fromUnixTime(date),\r\n    repeat: 'day',\r\n  };\r\n\r\n  const localNotification = {\r\n    title: i18n.t('notification.title'),\r\n    body: i18n.t('notification.message'),\r\n    ios: { sound: true },\r\n    android: { sound: true, priority: 'high', vibrate: true },\r\n  };\r\n\r\n  await Notifications.cancelAllScheduledNotificationsAsync();\r\n  Notifications.scheduleLocalNotificationAsync(\r\n    localNotification,\r\n    schedulingOptions,\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}